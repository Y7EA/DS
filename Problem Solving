#include<iostream>
#include<vector>
#include<math.h>
using namespace std ;
//Y7EA0
//Problem Solving
int const N = 200000+5 ;
int vis[N];
//Q - Revers Array
void reversArray(int arr[] , int size)
{
    int l = 0  , r = size - 1 ;
    while(l<=r)
    {
        swap(arr[l],arr[r]);
        l++;
        r--;
    }
}
void revArray(int arr[] , int size )
{
    for(int i = 0 ; i < size / 2 ; i ++)
    {
        /*
        int temp = arr[i];
        arr[i]= arr[size - i - 1];
        arr[size - i - 1] = temp ;
        */
        swap(arr[i], arr[size - i - 1 ]);
    }
}
//Q- Write a function if the number has a square root
bool hasSquareRoot(int n) {
    if (n < 0) {
        return false;
    }

    for (int i = 0; i * i <= n; i++) {
        if (i * i == n) {
            return true;
        }
    }
    return false;
}
//Q- Count the number of odd digits in the number
void OddDigits(int n)
{
    int c = 0 ;
    while(n>0)
    {
        int l = n % 10 ;
        n=n/10;
        if(l%2 != 0)
            c++;
    }
    cout<<c<<endl;
}
//Q- Check if the Balanced array
bool isBalanced(int arr[] , int size)
{
    int s1 = 0 , s2 = 0 ;
    for(int i = 0 , j = size / 2  ; i < size / 2 , j <size  ; i ++ , j++ )
    {
        s1+=arr[i];
        s2+=arr[j];

    }
    if(s1==s2) return true ;
    else return false ;
}
//Q- Check if string is a Palindrome
bool isPalndrome(string s )
{
    int l = 0 , r = s.length() - 1  ;
    while(l<r)
    {
        if(s[l]!=s[r]) return false ;
        l++;
        r-- ;
    }
    return true ;
}
//Q- Fibonacci sequenc usin Recursion  0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...
int fibonacci(int n )
{
    if(n == 1 || n == 0 ) return n ;
    else
    {
        return fibonacci(n-2) +  fibonacci(n-1);
    }
}
//Q- Fibonacci  Loop
int fibonaccii(int n)
{
    int a = 0, b = 1, c;
     if (n == 0) {
         return a;
     }
     for (int i = 2; i <= n; i++) {
         c = a + b;
         a = b;
         b = c;
     }
     return b;
}

//Q- Sort by frequency array
void SortFreq(int arr[] , int size  )
{
    for(int i = 0 ; i < size ; i++)
    {
        vis[arr[i]]++;
    }
    for(int i = 1 ; i < N ; i++)
    {
        while(vis[i]--)
        {
            cout<<i<<" ";
        }
    }
    cout<<endl;
}

//Q- Finding the remainder of the division without using %
int Modulus(int a , int b )
{
    // 3 % 2 = 1 = 3 - 2 = 1 - 2 ?!
    // 10 % 2 = 0 = 10 - 2 = 8 - 2 = 6 - 2 = 4 - 2 = 2 - 2 = 0
    while(a >= b )
    {
        a = a- b ;
    }
    return a ;
}
//Q-Ceiling Method
int celing(double x)
{
    return int(x)+1 ;
}

//Q- Power Metod

int power(int n , int exp)
{
    if(exp == 0 ) return 1 ;
    else if ( exp > 0 )
    {
        return n * power(n , exp - 1 );
    }
    else
    {
        return 1 / n * power(n , exp - 1 );
    }
}
//Q- Find Longest Sequence of String
// ??????

//Q- Compare Numbers on the string
bool compareNumbers(string s1 , string s2)
{
    int num1 = stoi(s1); // stio -> string to integer
    int num2 = stoi(s2);
    return num1 > num2 ;
}

//Q- Find Extra Char an tow string
char findExtraChar(string s1 , string s2)
{
    int sum1 = 0 , sum2 = 0 ;
    for(auto x : s1)
    {
        sum1 += int (x) ;
    }
    
    for(auto x : s2)
    {
        sum2 += int (x) ;
    }
    
    return char(abs(sum1 - sum2));
}


int main()
{
    int arr[] = {1,2,3,4,5,6,7,8,9};
    int arr1[]= {2,4,1,5};
    int size = sizeof(arr)/ sizeof(arr[0]);
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    string s = "racecar" ;
    reversArray(arr, size);
    for(auto x : arr)
    {
        cout<<x<<" ";
    }
    cout<<endl;
    
    cout<<hasSquareRoot(9)<<endl;
    
    OddDigits(123456);
    
    if(isBalanced(arr1, size1))
    {
        cout<<"YES"<<endl;
    }else
    {
        cout<<"NO"<<endl;
    }
    
    cout<<isPalndrome(s)<<endl;
    
    for(int i = 0 ; i < 10 ; i++){
        cout<<fibonacci(i)<<" ";
    }
    cout<<endl;
    
    for(int i = 0 ; i < 10 ; i++){
        cout<<fibonaccii(i)<<" ";
    }
    cout<<endl;
    
    SortFreq(arr1,size1);
    
    cout<<"3 % 2 = "<<Modulus(3,2)<<endl;
    
    double x = 9.2 ;
    cout << "The ceiling of " << x << " is: " << celing(x) << endl;
    
    cout << "The Power of  2^4  is: " << power(2,4) << endl;

    cout<<findExtraChar("YahyaR", "Yahya")<<endl;
}
